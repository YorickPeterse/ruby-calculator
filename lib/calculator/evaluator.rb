module Calculator
  ##
  # The evaluator walks over the AST generated by {Calculator::Parser} and
  # evaluates it. Note that this evaluator processes the AST from outwards.
  # That is, the most deeply nested node will be processed first.
  #
  # For example, take the following AST:
  #
  #     [
  #       [
  #         :add,
  #         [ :mul, [:int, 5], [:int, 3] ],
  #         [:int, 2]
  #       ]
  #     ]
  #
  # Here the `mul` expression and its arguments would be processed before the
  # `add` expression.
  #
  class Evaluator
    attr_reader :stack

    def initialize
      @stack = []
    end

    ##
    # The entry point for evaluating an entire AST. The return value should be
    # a number based on the input.
    #
    # @param [Array] ast
    # @return [Numeric]
    #
    def evaluate(ast)

    end
  end # Evaluator
end # Calculator
